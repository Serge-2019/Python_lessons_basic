from functools import reduce
from random import randint

# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

print("Транспонированная матрица: ", list(map(list, zip(*matrix)))) # в чем была сложность если решение было в методичке :)

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""


mx = ind = sq = 0
source = ''.join(number.split())
for i in range(len(source)-5):
    seq = source[i:i+5]
    mul = reduce(lambda x, y: x * y, map(int, seq))
    if mul > mx:
        sq = seq
        mx = mul
        ind = i

print(f"Наибольшее произведение пяти последовательных цифр {sq} равно {mx} и находиться по смещению {ind}")


# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.


# заполняю расстановку ферзей случайным образом
source = []
while len(source) < 8:
    c = [randint(1, 8), randint(1, 8), 'N']
    if c not in source:
        source.append(c)

# source = [[8, 1, 'N'], [4, 2, 'N'], [1, 3, 'N'], [3, 4, 'N'], [6, 5, 'N'], [2, 6, 'N'], [7, 7, 'N'], [5, 8, 'N']]
# ^^^ расстановка где никто никого не бьет

print("Дана следующая расстановка 8 ферзей:", source)

# поиск тех кто бьет друг друга
for i in range(7):
    x, y, l = source[i]
    if l == 'Y': # уже бьет кого-то
        continue
    for j in range(i+1, 8):
        b, c, _ = source[j]
        if x == b or y == c or abs(x-b) == abs(y-c):
            source[i][2] = 'Y'
            source[j][2] = 'Y'

# вывод как просили в задании YES / NO
for i in source:
    x, y, l = i
    print(f"Ферзь ({x}, {y}): {('YES' if l == 'Y' else 'NO')}")

# вывод в виде доски где видно кто кого бьет буквами Y/N
def check(i, j, f):
    if [j+1, i+1, 'Y'] in f:
        return 'Y'
    elif [j+1, i+1, 'N'] in f:
        return 'N'
    return ''

def print_board(f):
    print( " " * 3, ("{:_^5}" * 8).format(*range(1,9)), sep = '_')
    for i in range(8):
        print(f"{i+1} |", ("{:^4}|" * 8).format( *[check(i, j, f) for j in range(8)] ))
        print("  |" + ("-" * 8 * 5) + "|", sep = '')

print_board(source)
